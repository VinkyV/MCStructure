import{_ as s,c as n,o as a,d as e}from"./app-SaJJkj-5.js";const l={},i=e(`<h1 id="k" tabindex="-1"><a class="header-anchor" href="#k"><span>K</span></a></h1><h3 id="ktx-ktxinfo" tabindex="-1"><a class="header-anchor" href="#ktx-ktxinfo"><span><code>KTX::KTXInfo</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(4) <code>int</code></td><td>glInterFormat</td></tr><tr><td>8</td><td>(24) <code>std::vector&lt;int&gt;</code></td><td>imageSizeList</td></tr><tr><td>32</td><td>(1) <code>unsigned __int8</code></td><td>mipmapCount</td></tr><tr><td>36</td><td>(4) <code>unsigned int</code></td><td>storageSize</td></tr></tbody></table><h3 id="kickcommanddata" tabindex="-1"><a class="header-anchor" href="#kickcommanddata"><span><code>KickCommandData</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(1) <code>_BYTE[1]</code></td><td>requiredPermissionLevel</td></tr><tr><td>8</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>name</td></tr><tr><td>24</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>description</td></tr><tr><td>40</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>reason</td></tr><tr><td>56</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>success</td></tr><tr><td>72</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>alias</td></tr><tr><td>88</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>targetParamTitle</td></tr><tr><td>104</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>reasonDescription</td></tr></tbody></table><h3 id="killstrings" tabindex="-1"><a class="header-anchor" href="#killstrings"><span><code>KillStrings</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>name</td></tr><tr><td>16</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>description</td></tr><tr><td>32</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>success</td></tr><tr><td>48</td><td>(16) <code>gsl::basic_string_span&lt;char const ,-1&gt;</code></td><td>alias</td></tr></tbody></table><h3 id="keymapping" tabindex="-1"><a class="header-anchor" href="#keymapping"><span><code>Keymapping</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(32) <code>std::string</code></td><td>mAction</td></tr><tr><td>32</td><td>(24) <code>std::vector&lt;int&gt;</code></td><td>mKeys</td></tr><tr><td>56</td><td>(1) <code>bool</code></td><td>mAllowRemap</td></tr></tbody></table><h3 id="keymanager" tabindex="-1"><a class="header-anchor" href="#keymanager"><span><code>KeyManager</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(8) <code>KeyManager_vtbl *</code></td><td>__vftable</td></tr><tr><td>8</td><td>(32) <code>std::string</code></td><td>mPublicKey</td></tr><tr><td>40</td><td>(8) <code>std::unique_ptr&lt;Crypto::Asymmetric::Asymmetric&gt;</code></td><td>mInstance</td></tr></tbody></table><h3 id="keyboardaction" tabindex="-1"><a class="header-anchor" href="#keyboardaction"><span><code>KeyboardAction</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(4) <code>int</code></td><td>state</td></tr><tr><td>4</td><td>(1) <code>unsigned __int8</code></td><td>key</td></tr><tr><td>8</td><td>(4) <code>int</code></td><td>controllerId</td></tr></tbody></table><h3 id="keyornameresult" tabindex="-1"><a class="header-anchor" href="#keyornameresult"><span><code>KeyOrNameResult</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(32) <code>std::string</code></td><td>mString</td></tr><tr><td>32</td><td>(4) <code>KeyOrNameResult::ResultType</code></td><td>mType</td></tr></tbody></table><h3 id="keyframetransform" tabindex="-1"><a class="header-anchor" href="#keyframetransform"><span><code>KeyFrameTransform</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(24) <code>std::vector&lt;KeyFrameTransformData&gt;</code></td><td>mPrePost</td></tr><tr><td>24</td><td>(16) <code>KeyFrameLerpMode</code></td><td>mLerpMode</td></tr><tr><td>40</td><td>(4) <code>float</code></td><td>mKeyFrameTimeStamp</td></tr></tbody></table><h3 id="keyframelerpmode" tabindex="-1"><a class="header-anchor" href="#keyframelerpmode"><span><code>KeyFrameLerpMode</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(8) <code>std::unique_ptr&lt;glm::tmat4x4&lt;float,0&gt;&gt;</code></td><td>mPrecomputedCubicCoeffs</td></tr><tr><td>8</td><td>(4) <code>_BYTE[4]</code></td><td>mLerpStyle</td></tr></tbody></table><h3 id="knockbackevent" tabindex="-1"><a class="header-anchor" href="#knockbackevent"><span><code>KnockBackEvent</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(24) <code>WeakRefT&lt;EntityRefTraits&gt;</code></td><td>mActor</td></tr></tbody></table><h3 id="knownfolderid" tabindex="-1"><a class="header-anchor" href="#knownfolderid"><span><code>KNOWNFOLDERID</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(4) <code>unsigned int</code></td><td>Data1</td></tr><tr><td>4</td><td>(2) <code>unsigned __int16</code></td><td>Data2</td></tr><tr><td>6</td><td>(2) <code>unsigned __int16</code></td><td>Data3</td></tr><tr><td>8</td><td>(8) <code>unsigned __int8[8]</code></td><td>Data4</td></tr></tbody></table><h3 id="keyboardinputmapping" tabindex="-1"><a class="header-anchor" href="#keyboardinputmapping"><span><code>KeyboardInputMapping</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(24) <code>std::vector&lt;KeyboardKeyBinding&gt;</code></td><td>keyBindings</td></tr></tbody></table><h3 id="keyboardmapper-keyboardkeybuttondetails" tabindex="-1"><a class="header-anchor" href="#keyboardmapper-keyboardkeybuttondetails"><span><code>KeyboardMapper::KeyboardKeyButtonDetails</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(4) <code>unsigned int</code></td><td>nameId</td></tr><tr><td>4</td><td>(1) <code>FocusImpact</code></td><td>focusImpact</td></tr></tbody></table><h3 id="keyboardmapper-keyboardmappingdata" tabindex="-1"><a class="header-anchor" href="#keyboardmapper-keyboardmappingdata"><span><code>KeyboardMapper::KeyboardMappingData</code></span></a></h3><table><thead><tr><th>Offset</th><th>Type</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>(64) <code>std::unordered_multimap&lt;int,KeyboardMapper::KeyboardKeyButtonDetails&gt;</code></td><td>mKeyboardKeyToButtonDetailsMap</td></tr></tbody></table><h3 id="keyboardremappinglayout" tabindex="-1"><a class="header-anchor" href="#keyboardremappinglayout"><span><code>KeyboardRemappingLayout</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj __declspec(align(8)) KeyboardRemappingLayout : RemappingLayout</span>
<span class="line">{</span>
<span class="line">  const KeyboardType mKeyboardType;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyboardremappinglayout-vtbl" tabindex="-1"><a class="header-anchor" href="#keyboardremappinglayout-vtbl"><span><code>KeyboardRemappingLayout_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KeyboardRemappingLayout_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~RemappingLayout)(RemappingLayout *this);</span>
<span class="line">  void (__fastcall *setMappingWithRawInput)(RemappingLayout *this, const std::string *, int, RawInputType);</span>
<span class="line">  int (__fastcall *getAdjustedKey)(RemappingLayout *this, int);</span>
<span class="line">  std::string *(__fastcall *getSaveString)(RemappingLayout *this, std::string *result, const std::string *);</span>
<span class="line">  std::string *(__fastcall *getMappedKeyName)(RemappingLayout *this, std::string *result, const Keymapping *);</span>
<span class="line">  std::string *(__fastcall *getMappedKeyName)(RemappingLayout *this, std::string *result, int, bool);</span>
<span class="line">  std::string *(__fastcall *getMappedKeyName)(RemappingLayout *this, std::string *result, int);</span>
<span class="line">  std::string *(__fastcall *getKeySpriteLocation)(RemappingLayout *this, std::string *result, const Keymapping *);</span>
<span class="line">  std::string *(__fastcall *getKeySpriteLocation)(RemappingLayout *this, std::string *result, int);</span>
<span class="line">  int (__fastcall *_rawKeyToKey)(RemappingLayout *this, int, RawInputType);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keymanager-vtbl" tabindex="-1"><a class="header-anchor" href="#keymanager-vtbl"><span><code>KeyManager_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KeyManager_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~KeyManager)(KeyManager *this);</span>
<span class="line">  bool (__fastcall *isValid)(KeyManager *this);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyboardmanager" tabindex="-1"><a class="header-anchor" href="#keyboardmanager"><span><code>KeyboardManager</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KeyboardManager</span>
<span class="line">{</span>
<span class="line">  KeyboardManager_vtbl *__vftable /*VFT*/;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyboardmanager-vtbl" tabindex="-1"><a class="header-anchor" href="#keyboardmanager-vtbl"><span><code>KeyboardManager_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KeyboardManager_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~KeyboardManager)(KeyboardManager *this);</span>
<span class="line">  bool (__fastcall *tryEnableKeyboard)(KeyboardManager *this, const std::string *, int, bool, bool, bool, const Vec2 *, float);</span>
<span class="line">  bool (__fastcall *isFullScreenKeyboard)(KeyboardManager *this);</span>
<span class="line">  void (__fastcall *disableKeyboard)(KeyboardManager *this);</span>
<span class="line">  void (__fastcall *setKeyboardActive)(KeyboardManager *this, bool);</span>
<span class="line">  bool (__fastcall *canActivateKeyboard)(KeyboardManager *this);</span>
<span class="line">  bool (__fastcall *isKeyboardEnabled)(KeyboardManager *this);</span>
<span class="line">  bool (__fastcall *isKeyboardActive)(KeyboardManager *this);</span>
<span class="line">  bool (__fastcall *wasEnabledWithMultiline)(KeyboardManager *this);</span>
<span class="line">  int (__fastcall *getMaxLength)(KeyboardManager *this);</span>
<span class="line">  float (__fastcall *getKeyboardHeight)(KeyboardManager *this);</span>
<span class="line">  void (__fastcall *setForcedHeight)(KeyboardManager *this, float);</span>
<span class="line">  bool (__fastcall *tryClaimKeyboardOwnership)(KeyboardManager *this);</span>
<span class="line">  void (__fastcall *releaseKeyboardOwnership)(KeyboardManager *this);</span>
<span class="line">  bool (__fastcall *getKeyboardClosedEvent)(KeyboardManager *this);</span>
<span class="line">  void (__fastcall *clearKeyboardClosedEvent)(KeyboardManager *this);</span>
<span class="line">  void (__fastcall *updateTextEditBoxPosition)(KeyboardManager *this, const RectangleArea *, const Vec2 *, const Vec2 *);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyframetransformdata" tabindex="-1"><a class="header-anchor" href="#keyframetransformdata"><span><code>KeyFrameTransformData</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KeyFrameTransformData</span>
<span class="line">{</span>
<span class="line">  std::vector&lt;ChannelTransform&gt; mChannelTransforms;</span>
<span class="line">  std::vector&lt;ChannelTransform_Float&gt; mChannelTransforms_Floats;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyboardkeybinding" tabindex="-1"><a class="header-anchor" href="#keyboardkeybinding"><span><code>KeyboardKeyBinding</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj __declspec(align(4)) KeyboardKeyBinding</span>
<span class="line">{</span>
<span class="line">  std::string buttonName;</span>
<span class="line">  int keyNum;</span>
<span class="line">  FocusImpact focusImpact;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="knockbackarmorupdater" tabindex="-1"><a class="header-anchor" href="#knockbackarmorupdater"><span><code>KnockbackArmorUpdater</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KnockbackArmorUpdater : ActorEventListener</span>
<span class="line">{</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="knockbackarmorupdater-vtbl" tabindex="-1"><a class="header-anchor" href="#knockbackarmorupdater-vtbl"><span><code>KnockbackArmorUpdater_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KnockbackArmorUpdater_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~ActorEventListener)(ActorEventListener *this);</span>
<span class="line">  EventResult (__fastcall *onActorAttack)(ActorEventListener *this, Actor *, Actor *, int);</span>
<span class="line">  EventResult (__fastcall *onActorHit)(ActorEventListener *this, Actor *, const ActorDamageSource *, int *, bool *, bool *);</span>
<span class="line">  EventResult (__fastcall *onActorHurt)(ActorEventListener *this, const ActorHurtEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorMove)(ActorEventListener *this, Actor *, const Vec3 *);</span>
<span class="line">  EventResult (__fastcall *onActorPredictedMove)(ActorEventListener *this, Actor *, MovePredictionType, const Vec3 *);</span>
<span class="line">  EventResult (__fastcall *onActorTick)(ActorEventListener *this, Actor *);</span>
<span class="line">  EventResult (__fastcall *onActorSneakChanged)(ActorEventListener *this, Actor *, bool);</span>
<span class="line">  EventResult (__fastcall *onActorStartRiding)(ActorEventListener *this, Actor *, Actor *);</span>
<span class="line">  EventResult (__fastcall *onActorStopRiding)(ActorEventListener *this, Actor *, bool, bool, bool);</span>
<span class="line">  EventResult (__fastcall *onActorDeath)(ActorEventListener *this, Actor *, const ActorDamageSource *, ActorType);</span>
<span class="line">  EventResult (__fastcall *onActorDefinitionEventTriggered)(ActorEventListener *this, const ActorDefinitionEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorUseItem)(ActorEventListener *this, const ActorUseItemEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorUseItemOn)(ActorEventListener *this, Actor *, const ItemStack *, const BlockPos *, unsigned __int8);</span>
<span class="line">  EventResult (__fastcall *onActorCreated)(ActorEventListener *this, Actor *);</span>
<span class="line">  EventResult (__fastcall *onProjectileHit)(ActorEventListener *this, const ProjectileHitEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorTeleported)(ActorEventListener *this, Actor *);</span>
<span class="line">  EventResult (__fastcall *onActorAttackedActor)(ActorEventListener *this, Actor *, Actor *);</span>
<span class="line">  EventResult (__fastcall *onActorAcquiredItem)(ActorEventListener *this, const ActorAcquiredItemEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorPlacedItem)(ActorEventListener *this, Actor *, const ItemInstance *);</span>
<span class="line">  EventResult (__fastcall *onActorDroppedItem)(ActorEventListener *this, Actor *, const ItemInstance *);</span>
<span class="line">  EventResult (__fastcall *onActorCarriedItemChanged)(ActorEventListener *this, Actor *, const ItemInstance *, const ItemInstance *, HandSlot);</span>
<span class="line">  EventResult (__fastcall *onActorEquippedArmor)(ActorEventListener *this, Actor *, const ItemInstance *, ArmorSlot);</span>
<span class="line">  EventResult (__fastcall *onActorRemoved)(ActorEventListener *this, Actor *);</span>
<span class="line">  EventResult (__fastcall *onActorMobInteraction)(ActorEventListener *this, Actor *, MinecraftEventing::InteractionType, ActorType);</span>
<span class="line">  EventResult (__fastcall *onActorTargetAcquired)(ActorEventListener *this, Actor *, Actor *);</span>
<span class="line">  EventResult (__fastcall *onActorGriefingBlock)(ActorEventListener *this, const ActorGriefingBlockEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorAddEffect)(ActorEventListener *this, const ActorAddEffectEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorKilled)(ActorEventListener *this, const ActorKilledEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorRemoveEffect)(ActorEventListener *this, const ActorRemoveEffectEvent *);</span>
<span class="line">  EventResult (__fastcall *onKnockBack)(ActorEventListener *this, const KnockBackEvent *);</span>
<span class="line">  EventResult (__fastcall *onMountTaming)(ActorEventListener *this, const MountTamingEvent *);</span>
<span class="line">  EventResult (__fastcall *onActorAnimationChanged)(ActorEventListener *this, const ActorAnimationChangedEvent *);</span>
<span class="line">  EventResult (__fastcall *onSendActorAddBuff)(ActorEventListener *this, Actor *, const AttributeInstance *, const std::string *, int, bool, int, int, int);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyspan" tabindex="-1"><a class="header-anchor" href="#keyspan"><span><code>KeySpan</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KeySpan</span>
<span class="line">{</span>
<span class="line">  const std::string name;</span>
<span class="line">  const int start;</span>
<span class="line">  int end;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyboardlayout" tabindex="-1"><a class="header-anchor" href="#keyboardlayout"><span><code>KeyboardLayout</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KeyboardLayout</span>
<span class="line">{</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="knockbackresistanceitemcomponent" tabindex="-1"><a class="header-anchor" href="#knockbackresistanceitemcomponent"><span><code>KnockbackResistanceItemComponent</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj __declspec(align(8)) KnockbackResistanceItemComponent : ItemComponent</span>
<span class="line">{</span>
<span class="line">  float mProtection;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="knockbackresistanceitemcomponent-vtbl" tabindex="-1"><a class="header-anchor" href="#knockbackresistanceitemcomponent-vtbl"><span><code>KnockbackResistanceItemComponent_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KnockbackResistanceItemComponent_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~ItemComponent)(ItemComponent *this);</span>
<span class="line">  bool (__fastcall *checkComponentDataForContentErrors)(ItemComponent *this);</span>
<span class="line">  void (__fastcall *writeSettings)(ItemComponent *this);</span>
<span class="line">  bool (__fastcall *useOn)(ItemComponent *this, ItemStack *, Actor *, const BlockPos *, unsigned __int8, const Vec3 *);</span>
<span class="line">  bool (__fastcall *isNetworkComponent)(ItemComponent *this);</span>
<span class="line">  std::unique_ptr&lt;CompoundTag&gt; *(__fastcall *buildNetworkTag)(ItemComponent *this, std::unique_ptr&lt;CompoundTag&gt; *result);</span>
<span class="line">  void (__fastcall *initializeFromNetwork)(ItemComponent *this, const CompoundTag *);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyboard" tabindex="-1"><a class="header-anchor" href="#keyboard"><span><code>Keyboard</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj Keyboard</span>
<span class="line">{</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyboardmapper" tabindex="-1"><a class="header-anchor" href="#keyboardmapper"><span><code>KeyboardMapper</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KeyboardMapper : InputDeviceMapper</span>
<span class="line">{</span>
<span class="line">  std::unordered_map&lt;int,KeyboardMapper::KeyboardMappingData&gt; mPerIdMappings;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyboardmapper-vtbl" tabindex="-1"><a class="header-anchor" href="#keyboardmapper-vtbl"><span><code>KeyboardMapper_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KeyboardMapper_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~InputDeviceMapper)(InputDeviceMapper *this);</span>
<span class="line">  void (__fastcall *setMapping)(InputDeviceMapper *this, InputEventQueue *, const BindingFactory *, const InputMapping *, int);</span>
<span class="line">  void (__fastcall *clearMapping)(InputDeviceMapper *this, int);</span>
<span class="line">  void (__fastcall *clearInputDeviceQueue)(InputDeviceMapper *this);</span>
<span class="line">  void (__fastcall *clearInputDeviceQueueForFrame)(InputDeviceMapper *this);</span>
<span class="line">  void (__fastcall *hardResetInputDeviceQueue)(InputDeviceMapper *this);</span>
<span class="line">  bool (__fastcall *tick)(InputDeviceMapper *this, InputEventQueue *, ControllerIDtoClientMap *);</span>
<span class="line">  InputMode (__fastcall *getInputMode)(InputDeviceMapper *this);</span>
<span class="line">  void (__fastcall *getCursorPos)(InputDeviceMapper *this, float *, float *);</span>
<span class="line">  void (__fastcall *render)(InputDeviceMapper *this, InputRenderContext *);</span>
<span class="line">  void (__fastcall *setWindowSize)(InputDeviceMapper *this, int, int);</span>
<span class="line">  void (__fastcall *setBindingMode)(InputDeviceMapper *this, InputBindingMode, int);</span>
<span class="line">  InputBindingMode (__fastcall *getBindingMode)(InputDeviceMapper *this, int);</span>
<span class="line">  void (__fastcall *changeControllerId)(InputDeviceMapper *this, int, int);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kickcommand" tabindex="-1"><a class="header-anchor" href="#kickcommand"><span><code>KickCommand</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KickCommand : ServerCommand</span>
<span class="line">{</span>
<span class="line">  CommandSelector&lt;Player&gt; mPlayers;</span>
<span class="line">  CommandMessage mMessage;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kickcommand-vtbl" tabindex="-1"><a class="header-anchor" href="#kickcommand-vtbl"><span><code>KickCommand_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KickCommand_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~Command)(Command *this);</span>
<span class="line">  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="killcommand" tabindex="-1"><a class="header-anchor" href="#killcommand"><span><code>KillCommand</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KillCommand : Command</span>
<span class="line">{</span>
<span class="line">  CommandSelector&lt;Actor&gt; mTargets;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="killcommand-vtbl" tabindex="-1"><a class="header-anchor" href="#killcommand-vtbl"><span><code>KillCommand_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KillCommand_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~Command)(Command *this);</span>
<span class="line">  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="killcommand-ctor-l2-lambda-cb2bf1939a96fa330fd7ec1c15d0e65d" tabindex="-1"><a class="header-anchor" href="#killcommand-ctor-l2-lambda-cb2bf1939a96fa330fd7ec1c15d0e65d"><span><code>KillCommand::{ctor}::__l2::&lt;lambda_cb2bf1939a96fa330fd7ec1c15d0e65d&gt;</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KillCommand::{ctor}::__l2::&lt;lambda_cb2bf1939a96fa330fd7ec1c15d0e65d&gt;</span>
<span class="line">{</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kelpblock" tabindex="-1"><a class="header-anchor" href="#kelpblock"><span><code>KelpBlock</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KelpBlock : BlockLegacy</span>
<span class="line">{</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kelpblock-vtbl" tabindex="-1"><a class="header-anchor" href="#kelpblock-vtbl"><span><code>KelpBlock_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KelpBlock_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~BlockLegacy)(BlockLegacy *this);</span>
<span class="line">  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);</span>
<span class="line">  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);</span>
<span class="line">  std::shared_ptr&lt;BlockActor&gt; *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr&lt;BlockActor&gt; *result, const BlockPos *, const Block *);</span>
<span class="line">  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);</span>
<span class="line">  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);</span>
<span class="line">  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);</span>
<span class="line">  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);</span>
<span class="line">  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);</span>
<span class="line">  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector&lt;AABB&gt; *);</span>
<span class="line">  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);</span>
<span class="line">  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector&lt;AABB&gt; *, Actor *);</span>
<span class="line">  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);</span>
<span class="line">  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);</span>
<span class="line">  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);</span>
<span class="line">  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function&lt;Block const &amp; __cdecl(BlockPos const &amp;)&gt; *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);</span>
<span class="line">  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);</span>
<span class="line">  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);</span>
<span class="line">  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);</span>
<span class="line">  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);</span>
<span class="line">  bool (__fastcall *isStemBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isContainerBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isFenceBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isWallBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isStairBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isSlabBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isDoorBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isRailBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isButtonBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isSignalSource)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);</span>
<span class="line">  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector&lt;std::string&gt; *);</span>
<span class="line">  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);</span>
<span class="line">  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);</span>
<span class="line">  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);</span>
<span class="line">  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);</span>
<span class="line">  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *canContainLiquid)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);</span>
<span class="line">  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);</span>
<span class="line">  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);</span>
<span class="line">  float (__fastcall *getThickness)(BlockLegacy *this);</span>
<span class="line">  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);</span>
<span class="line">  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);</span>
<span class="line">  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);</span>
<span class="line">  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);</span>
<span class="line">  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);</span>
<span class="line">  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);</span>
<span class="line">  bool (__fastcall *isBounceBlock)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);</span>
<span class="line">  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);</span>
<span class="line">  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);</span>
<span class="line">  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);</span>
<span class="line">  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);</span>
<span class="line">  bool (__fastcall *mayPick)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);</span>
<span class="line">  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);</span>
<span class="line">  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);</span>
<span class="line">  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);</span>
<span class="line">  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);</span>
<span class="line">  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);</span>
<span class="line">  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);</span>
<span class="line">  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);</span>
<span class="line">  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);</span>
<span class="line">  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);</span>
<span class="line">  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector&lt;Item const *&gt; *, float, int, bool);</span>
<span class="line">  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector&lt;Item const *&gt; *, float, int, bool);</span>
<span class="line">  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);</span>
<span class="line">  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);</span>
<span class="line">  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);</span>
<span class="line">  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);</span>
<span class="line">  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);</span>
<span class="line">  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);</span>
<span class="line">  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);</span>
<span class="line">  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);</span>
<span class="line">  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);</span>
<span class="line">  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);</span>
<span class="line">  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);</span>
<span class="line">  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector&lt;std::pair&lt;std::string const ,std::string const &gt;&gt; *, RenderParams *);</span>
<span class="line">  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);</span>
<span class="line">  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);</span>
<span class="line">  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);</span>
<span class="line">  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);</span>
<span class="line">  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);</span>
<span class="line">  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);</span>
<span class="line">  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  int (__fastcall *getIconYOffset)(BlockLegacy *this);</span>
<span class="line">  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);</span>
<span class="line">  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);</span>
<span class="line">  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);</span>
<span class="line">  int (__fastcall *getColor)(BlockLegacy *this, const Block *);</span>
<span class="line">  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);</span>
<span class="line">  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);</span>
<span class="line">  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);</span>
<span class="line">  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);</span>
<span class="line">  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);</span>
<span class="line">  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);</span>
<span class="line">  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);</span>
<span class="line">  bool (__fastcall *canSpawnOn)(BlockLegacy *this);</span>
<span class="line">  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);</span>
<span class="line">  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);</span>
<span class="line">  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);</span>
<span class="line">  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);</span>
<span class="line">  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);</span>
<span class="line">  BlockLegacy *(__fastcall *init)(BlockLegacy *this);</span>
<span class="line">  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);</span>
<span class="line">  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);</span>
<span class="line">  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);</span>
<span class="line">  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);</span>
<span class="line">  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);</span>
<span class="line">  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);</span>
<span class="line">  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);</span>
<span class="line">  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);</span>
<span class="line">  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);</span>
<span class="line">  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);</span>
<span class="line">  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);</span>
<span class="line">  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);</span>
<span class="line">  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);</span>
<span class="line">  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);</span>
<span class="line">  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);</span>
<span class="line">  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);</span>
<span class="line">  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);</span>
<span class="line">  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);</span>
<span class="line">  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);</span>
<span class="line">  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);</span>
<span class="line">  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);</span>
<span class="line">  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);</span>
<span class="line">  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);</span>
<span class="line">  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);</span>
<span class="line">  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);</span>
<span class="line">  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);</span>
<span class="line">  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);</span>
<span class="line">  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);</span>
<span class="line">  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);</span>
<span class="line">  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);</span>
<span class="line">  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);</span>
<span class="line">  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);</span>
<span class="line">  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);</span>
<span class="line">  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);</span>
<span class="line">  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);</span>
<span class="line">  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);</span>
<span class="line">  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);</span>
<span class="line">  bool (__fastcall *isCropBlock)(BlockLegacy *this);</span>
<span class="line">  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector&lt;std::pair&lt;std::string const ,std::string const &gt;&gt; *, RenderParams *);</span>
<span class="line">  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector&lt;std::pair&lt;std::string const ,std::string const &gt;&gt; *, RenderParams *);</span>
<span class="line">  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector&lt;std::pair&lt;std::string const ,std::string const &gt;&gt; *, RenderParams *);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="knownfolder-definition" tabindex="-1"><a class="header-anchor" href="#knownfolder-definition"><span><code>KNOWNFOLDER_DEFINITION</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct KNOWNFOLDER_DEFINITION</span>
<span class="line">{</span>
<span class="line">  KF_CATEGORY category;</span>
<span class="line">  wchar_t *pszName;</span>
<span class="line">  wchar_t *pszDescription;</span>
<span class="line">  _GUID fidParent;</span>
<span class="line">  wchar_t *pszRelativePath;</span>
<span class="line">  wchar_t *pszParsingName;</span>
<span class="line">  wchar_t *pszTooltip;</span>
<span class="line">  wchar_t *pszLocalizedName;</span>
<span class="line">  wchar_t *pszIcon;</span>
<span class="line">  wchar_t *pszSecurity;</span>
<span class="line">  unsigned int dwAttributes;</span>
<span class="line">  unsigned int kfdFlags;</span>
<span class="line">  _GUID ftidType;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kencrypt-valueinfo" tabindex="-1"><a class="header-anchor" href="#kencrypt-valueinfo"><span><code>KEncrypt::_ValueInfo</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct KEncrypt::_ValueInfo</span>
<span class="line">{</span>
<span class="line">  unsigned int KeyHash;</span>
<span class="line">  unsigned int Value;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="knockbackroargoal" tabindex="-1"><a class="header-anchor" href="#knockbackroargoal"><span><code>KnockbackRoarGoal</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj __declspec(align(8)) KnockbackRoarGoal : Goal</span>
<span class="line">{</span>
<span class="line">  const int mDuration;</span>
<span class="line">  const int mAttackTime;</span>
<span class="line">  const int mKnockbackDamage;</span>
<span class="line">  const int mKnockbackStrength;</span>
<span class="line">  const int mKnockbackRange;</span>
<span class="line">  ActorFilterGroup mKnockbackFilter;</span>
<span class="line">  ActorFilterGroup mDamageFilter;</span>
<span class="line">  const DefinitionTrigger mOnRoarEnd;</span>
<span class="line">  const int mCooldownTime;</span>
<span class="line">  int mCurrentCooldown;</span>
<span class="line">  Mob *mMob;</span>
<span class="line">  int mRoarTime;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="knockbackroargoal-vtbl" tabindex="-1"><a class="header-anchor" href="#knockbackroargoal-vtbl"><span><code>KnockbackRoarGoal_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KnockbackRoarGoal_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~Goal)(Goal *this);</span>
<span class="line">  bool (__fastcall *canUse)(Goal *this);</span>
<span class="line">  bool (__fastcall *canContinueToUse)(Goal *this);</span>
<span class="line">  bool (__fastcall *canBeInterrupted)(Goal *this);</span>
<span class="line">  void (__fastcall *start)(Goal *this);</span>
<span class="line">  void (__fastcall *stop)(Goal *this);</span>
<span class="line">  void (__fastcall *tick)(Goal *this);</span>
<span class="line">  void (__fastcall *appendDebugInfo)(Goal *this, std::string *);</span>
<span class="line">  bool (__fastcall *isTargetGoal)(Goal *this);</span>
<span class="line">  void (__fastcall *onPlayerDimensionChanged)(Goal *this, Player *, AutomaticID&lt;Dimension,int&gt;);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kelpfeature" tabindex="-1"><a class="header-anchor" href="#kelpfeature"><span><code>KelpFeature</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KelpFeature : Feature</span>
<span class="line">{</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kelpfeature-vtbl" tabindex="-1"><a class="header-anchor" href="#kelpfeature-vtbl"><span><code>KelpFeature_vtbl</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct /*VFT*/ KelpFeature_vtbl</span>
<span class="line">{</span>
<span class="line">  void (__fastcall *~IFeature)(IFeature *this);</span>
<span class="line">  std::optional&lt;BlockPos&gt; *(__fastcall *place)(IFeature *this, std::optional&lt;BlockPos&gt; *result, IBlockWorldGenAPI *, const BlockPos *, Random *, RenderParams *);</span>
<span class="line">  std::string *(__fastcall *getStructureName)(IFeature *this, std::string *result);</span>
<span class="line">  bool (__fastcall *parse)(IFeature *this, const rapidjson::GenericValue&lt;rapidjson::UTF8&lt;char&gt;,rapidjson::MemoryPoolAllocator&lt;rapidjson::CrtAllocator&gt; &gt; *, IWorldRegistriesProvider *);</span>
<span class="line">  bool (__fastcall *place)(Feature *this, BlockSource *, const BlockPos *, Random *);</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyframetransform-computecubicpolynomial-l9-lambda-8345864a9afa0c4a53458247a6c1a2c5" tabindex="-1"><a class="header-anchor" href="#keyframetransform-computecubicpolynomial-l9-lambda-8345864a9afa0c4a53458247a6c1a2c5"><span><code>KeyFrameTransform::computeCubicPolynomial::__l9::&lt;lambda_8345864a9afa0c4a53458247a6c1a2c5&gt;</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">struct __cppobj KeyFrameTransform::computeCubicPolynomial::__l9::&lt;lambda_8345864a9afa0c4a53458247a6c1a2c5&gt;</span>
<span class="line">{</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89),t=[i];function c(o,d){return a(),n("div",null,t)}const p=s(l,[["render",c],["__file","K.html.vue"]]),v=JSON.parse('{"path":"/1.16.201/structure/K.html","title":"K","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"KTX::KTXInfo","slug":"ktx-ktxinfo","link":"#ktx-ktxinfo","children":[]},{"level":3,"title":"KickCommandData","slug":"kickcommanddata","link":"#kickcommanddata","children":[]},{"level":3,"title":"KillStrings","slug":"killstrings","link":"#killstrings","children":[]},{"level":3,"title":"Keymapping","slug":"keymapping","link":"#keymapping","children":[]},{"level":3,"title":"KeyManager","slug":"keymanager","link":"#keymanager","children":[]},{"level":3,"title":"KeyboardAction","slug":"keyboardaction","link":"#keyboardaction","children":[]},{"level":3,"title":"KeyOrNameResult","slug":"keyornameresult","link":"#keyornameresult","children":[]},{"level":3,"title":"KeyFrameTransform","slug":"keyframetransform","link":"#keyframetransform","children":[]},{"level":3,"title":"KeyFrameLerpMode","slug":"keyframelerpmode","link":"#keyframelerpmode","children":[]},{"level":3,"title":"KnockBackEvent","slug":"knockbackevent","link":"#knockbackevent","children":[]},{"level":3,"title":"KNOWNFOLDERID","slug":"knownfolderid","link":"#knownfolderid","children":[]},{"level":3,"title":"KeyboardInputMapping","slug":"keyboardinputmapping","link":"#keyboardinputmapping","children":[]},{"level":3,"title":"KeyboardMapper::KeyboardKeyButtonDetails","slug":"keyboardmapper-keyboardkeybuttondetails","link":"#keyboardmapper-keyboardkeybuttondetails","children":[]},{"level":3,"title":"KeyboardMapper::KeyboardMappingData","slug":"keyboardmapper-keyboardmappingdata","link":"#keyboardmapper-keyboardmappingdata","children":[]},{"level":3,"title":"KeyboardRemappingLayout","slug":"keyboardremappinglayout","link":"#keyboardremappinglayout","children":[]},{"level":3,"title":"KeyboardRemappingLayout_vtbl","slug":"keyboardremappinglayout-vtbl","link":"#keyboardremappinglayout-vtbl","children":[]},{"level":3,"title":"KeyManager_vtbl","slug":"keymanager-vtbl","link":"#keymanager-vtbl","children":[]},{"level":3,"title":"KeyboardManager","slug":"keyboardmanager","link":"#keyboardmanager","children":[]},{"level":3,"title":"KeyboardManager_vtbl","slug":"keyboardmanager-vtbl","link":"#keyboardmanager-vtbl","children":[]},{"level":3,"title":"KeyFrameTransformData","slug":"keyframetransformdata","link":"#keyframetransformdata","children":[]},{"level":3,"title":"KeyboardKeyBinding","slug":"keyboardkeybinding","link":"#keyboardkeybinding","children":[]},{"level":3,"title":"KnockbackArmorUpdater","slug":"knockbackarmorupdater","link":"#knockbackarmorupdater","children":[]},{"level":3,"title":"KnockbackArmorUpdater_vtbl","slug":"knockbackarmorupdater-vtbl","link":"#knockbackarmorupdater-vtbl","children":[]},{"level":3,"title":"KeySpan","slug":"keyspan","link":"#keyspan","children":[]},{"level":3,"title":"KeyboardLayout","slug":"keyboardlayout","link":"#keyboardlayout","children":[]},{"level":3,"title":"KnockbackResistanceItemComponent","slug":"knockbackresistanceitemcomponent","link":"#knockbackresistanceitemcomponent","children":[]},{"level":3,"title":"KnockbackResistanceItemComponent_vtbl","slug":"knockbackresistanceitemcomponent-vtbl","link":"#knockbackresistanceitemcomponent-vtbl","children":[]},{"level":3,"title":"Keyboard","slug":"keyboard","link":"#keyboard","children":[]},{"level":3,"title":"KeyboardMapper","slug":"keyboardmapper","link":"#keyboardmapper","children":[]},{"level":3,"title":"KeyboardMapper_vtbl","slug":"keyboardmapper-vtbl","link":"#keyboardmapper-vtbl","children":[]},{"level":3,"title":"KickCommand","slug":"kickcommand","link":"#kickcommand","children":[]},{"level":3,"title":"KickCommand_vtbl","slug":"kickcommand-vtbl","link":"#kickcommand-vtbl","children":[]},{"level":3,"title":"KillCommand","slug":"killcommand","link":"#killcommand","children":[]},{"level":3,"title":"KillCommand_vtbl","slug":"killcommand-vtbl","link":"#killcommand-vtbl","children":[]},{"level":3,"title":"KillCommand::{ctor}::__l2::<lambda_cb2bf1939a96fa330fd7ec1c15d0e65d>","slug":"killcommand-ctor-l2-lambda-cb2bf1939a96fa330fd7ec1c15d0e65d","link":"#killcommand-ctor-l2-lambda-cb2bf1939a96fa330fd7ec1c15d0e65d","children":[]},{"level":3,"title":"KelpBlock","slug":"kelpblock","link":"#kelpblock","children":[]},{"level":3,"title":"KelpBlock_vtbl","slug":"kelpblock-vtbl","link":"#kelpblock-vtbl","children":[]},{"level":3,"title":"KNOWNFOLDER_DEFINITION","slug":"knownfolder-definition","link":"#knownfolder-definition","children":[]},{"level":3,"title":"KEncrypt::_ValueInfo","slug":"kencrypt-valueinfo","link":"#kencrypt-valueinfo","children":[]},{"level":3,"title":"KnockbackRoarGoal","slug":"knockbackroargoal","link":"#knockbackroargoal","children":[]},{"level":3,"title":"KnockbackRoarGoal_vtbl","slug":"knockbackroargoal-vtbl","link":"#knockbackroargoal-vtbl","children":[]},{"level":3,"title":"KelpFeature","slug":"kelpfeature","link":"#kelpfeature","children":[]},{"level":3,"title":"KelpFeature_vtbl","slug":"kelpfeature-vtbl","link":"#kelpfeature-vtbl","children":[]},{"level":3,"title":"KeyFrameTransform::computeCubicPolynomial::__l9::<lambda_8345864a9afa0c4a53458247a6c1a2c5>","slug":"keyframetransform-computecubicpolynomial-l9-lambda-8345864a9afa0c4a53458247a6c1a2c5","link":"#keyframetransform-computecubicpolynomial-l9-lambda-8345864a9afa0c4a53458247a6c1a2c5","children":[]}],"git":{"updatedTime":1722099801000,"contributors":[{"name":"RedbeanW","email":"redbeana44945@gmail.com","commits":1},{"name":"VinkyV","email":"75137786+VinkyV@users.noreply.github.com","commits":1}]},"filePathRelative":"1.16.201/structure/K.md"}');export{p as comp,v as data};
